REACT EVENTS:
=============
=>Just like HTML DOM events, React can perform actions based on user events.
=>React has the same events as HTML: 
	=>Click
	=>Change
	=>Mouseover

ADDING EVENTS:
---------------------------
=>React events are written in camelCase syntax:
	=>onClick instead of onclick.
=>React event handlers are written inside curly braces:
	=>onClick={shoot}  instead of onClick="shoot()".
EXAMPLE:
import React from 'react';
import ReactDOM from 'react-dom/client';

function Football() {
  const shoot = () => {
    alert("Great Shot!");
  }

  return (
    <button onClick={shoot}>Take the shot!</button>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Football />);

PASSING ARGUMENTS:
-----------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';

function Football() {
  const shoot = (a) => {
    alert(a);
  }

  return (
    <button onClick={() => shoot("Goal!")}>Take the shot!</button>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Football />);

RECT EVENT OBJECT:
---------------------------------
=>Event handlers have access to the React event that triggered the function.
import React from 'react';
import ReactDOM from 'react-dom/client';

function Football() {
  const shoot = (a, b) => {
    alert(b.type);
		/*
		'b' represents the React event that triggered the function.
    In this case, the 'click' event
		*/
  }

  return (
    <button onClick={(event) => shoot("Goal!", event)}>Take the shot!</button>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Football />);

