REACT ES6:
=========
=>ES6 stands for ECMAScript 6.
=>ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, 
and is also known as ECMAScript 2015.

ES6:
-----
1.classes
2.arrow funtions
3.variables
4.arrat methods(.map())
5.destructuring
6.modules
7.ternary operator
8.spread operator

ES6 CLASSES:
===========
=>A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the 
properties are assigned inside a constructor() method.
EXAMPLE:
class car{
	constructor(name){
		this.brand = name;
	}
}
const mycar = new car("benz");

METHODS IN CLASS:
-------------------------------
We can add our own methods in a class:
EXAMPLE:
<!DOCTYPE html>
<html>

<body>
  
<script>
class Car {
  constructor(name) {
    this.brand = name;
  }

  present() {
    return 'I have a ' + this.brand;
  }
}

const mycar = new Car("Ford");
document.write(mycar.present());
</script>

</body>
</html>

CLASS INHERITANCE:
---------------------------------
==>To create a class inheritance, use the extends keyword.
EXAMPLE:
<!DOCTYPE html>
<html>

<body>
  
<script>
class Car {
  constructor(name) {
    this.brand = name;
  }

  present() {
    return 'I have a ' + this.brand;
  }
}

class Model extends Car {
  constructor(name, mod) {
    super(name);
    this.model = mod;
  }  
  show() {
    return this.present() + ', it is a ' + this.model
  }
}

const mycar = new Model("Ford", "Mustang");
document.write(mycar.show());
</script>

</body>
</html>

==>The super() method refers to the parent class.

ARROW FUNCTIONS:
=================
=>Array functions allo us to write shorter fucntion syntax.
BEFORE:
hello = function() {
  return "Hello World!";
}
AFTER:
hello = () => {
  return "Hello World!";
}

ARRAY FUNCTION WITH PARAMETERS:
------------------------------------------------------------
<!DOCTYPE html>
<html>

<body>

<h1>Arrow Function</h1>

<p>A demonstration of an arrow function in one line, with parameters.</p>

<p id="demo"></p>
  
<script>
hello = (val) => "Hello " + val;

document.getElementById("demo").innerHTML = hello("World");
</script>

</body>
</html>
ARRAY FUNCTION WITHOUT PARAMETERS:
-------------------------------------------------------------------
<!DOCTYPE html>
<html>

<body>

<h1>Arrow Function</h1>

<p>As you can see in this example, you can skip the parentheses when you have only one parameter.</p>

<p id="demo"></p>
  
<script>
hello = val => "Hello " + val;

document.getElementById("demo").innerHTML = hello("World");
</script>

</body>
</html>

THIS OPERATOR:
------------------------
=>In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.
EXAMPLE:
<!DOCTYPE html>
<html>

<body>

<h1>Regular Function</h1>

<p>The <strong>this</strong> keyword represents different objects depending on how the function was called.</p>

<button id="btn">Click Me!</button>

<p><strong>this</strong> represents:</p>

<p id="demo"></p>

<p>See the difference before and after the button is clicked.</p>
  
<script>
class Header {
  constructor() {
    this.color = "Red";
  }

  changeColor = function() {
    document.getElementById("demo").innerHTML += this;
  }
}

const myheader = new Header();

//The window object calls the function:
window.addEventListener("load", myheader.changeColor);

//A button object calls the function:
document.getElementById("btn").addEventListener("click", myheader.changeColor);

</script>

</body>
</html>

=>With arrow functions, the this keyword always represents the object that defined the arrow function.
EXAMPLE:
<!DOCTYPE html>
<html>

<body>

<h1>Arrow Function</h1>

<p>The <strong>this</strong> keyword represents the Header object.</p>

<button id="btn">Click Me!</button>

<p><strong>this</strong> represents:</p>

<p id="demo"></p>

 
<script>
class Header {
  constructor() {
    this.color = "Red";
  }

  changeColor = () => {
    document.getElementById("demo").innerHTML += this;
  }
}

const myheader = new Header();

//The window object calls the function:
window.addEventListener("load", myheader.changeColor);

//A button object calls the function:
document.getElementById("btn").addEventListener("click", myheader.changeColor);

</script>

</body>
</html>

VARIABLES:
==========
=>Before ES6 there was only one way of defining your variables: with the var keyword. 
If you did not define them, they would be assigned to the global object. Unless you were in strict mode, 
then you would get an error if your variables were undefined.

=>Now, with ES6, there are three ways of defining your variables: var, let, and const.

VAR:
------
VAR X = 5.6

=>If you use var outside of a function, it belongs to the global scope.
=>If you use var inside of a function, it belongs to that function.
=>If you use var inside of a block, i.e. a for loop, the variable is still available outside of that block.
=>VAR has a function scope

LET:
--------
LET X = 5.6

=>let is the block scoped version of var, and is limited to the block (or expression) where it is defined.
=>If you use let inside of a block, i.e. a for loop, the variable is only available inside of that loop.
=>LET has a block scope.

CONST:
------------
CONST X = 5.6

=>const is a variable that once it has been created, its value can never change.
=>CONST has a block scope.

ARRAY METHODS:
===============
=>There are many JavaScript array methods.
=>One of the most useful in React is the .map() array method.
=>The .map() method allows you to run a function on each item in the array, returning a new array as the result.

=>In React, map() can be used to generate lists.
EXAMPLE:
import React from 'react';
import ReactDOM from 'react-dom/client';
const myArray = ['apple', 'banana', 'orange'];
const myList = myArray.map((item) => <p>{item}</p>)
ReactDOM.render(myList, document.getElementById('root'));

DESTRUCTING:
============
=>We may have an array or object that we are working with, but we only need some of the items contained in these.
=>Destructuring makes it easy to extract only what is needed.

DESTRUCTING ARRAYS:
-------------------------------------
BEFORE:
const vehicles = ['mustang', 'f-150', 'expedition'];

// old way
const car = vehicles[0];
const truck = vehicles[1];
const suv = vehicles[2];

AFTER:
const vehicles = ['mustang', 'f-150', 'expedition'];

const [car, truck, suv] = vehicles;
EXAMPLE:
<!DOCTYPE html>
<html>

<body>
  
<script>
function calculate(a, b) {
  const add = a + b;
  const subtract = a - b;
  const multiply = a * b;
  const divide = a / b;

  return [add, subtract, multiply, divide];
}

const [add, subtract, multiply, divide] = calculate(4, 7);

document.write("<p>Sum: " + add + "</p>");
document.write("<p>Difference " + subtract + "</p>");
document.write("<p>Product: " + multiply + "</p>");
document.write("<p>Quotient " + divide + "</p>");
</script>

</body>
</html>

DESTRUCTING OBJECTS:
--------------------------------------
BEFORE:
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

// old way
function myVehicle(vehicle) {
  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';
}

AFTER:
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';
}

SPREAD OPERATOR:
================
The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.
EXAMPLE:
<!DOCTYPE html>
<html>

<body>

<script>
const numbersOne = [1, 2, 3];
const numbersTwo = [4, 5, 6];
const numbersCombined = [...numbersOne, ...numbersTwo];

document.write(numbersCombined);
</script>

</body>
</html>
=>spread operator is often used in combination with destructing
EXAMPLE:
<!DOCTYPE html>
<html>

<body>

<script>
const numbers = [1, 2, 3, 4, 5, 6];

const [one, two, ...rest] = numbers;

document.write("<p>" + one + "</p>");
document.write("<p>" + two + "</p>");
document.write("<p>" + rest + "</p>");
</script>

</body>
</html>

MODULES:
=========
=>ES Modules rely on the import and export statements.
EXPORT:
------------
=>You can export a function or variable from any file.
=>Let us create a file named person.js, and fill it with the things we want to export.
=>Two types:
	1.named
	2.default
1.NAMED EXPORTS:
------------------------------
export const name = "Jesse"
export const age = 40

const name = "Jesse"
const age = 40

export { name, age }
2.DEFAULT EXPORTS:
--------------------------------
const message = () => {
  const name = "Jesse";
  const age = 40;
  return name + ' is ' + age + 'years old.';
};

export default message;

IMPORT:
------------
=>You can import modules into a file in two ways, based on if they are named exports or default exports.
=>Named exports must be destructured using curly braces. Default exports do not.
1.IMPORT FROM NAMED EXPORTS:
------------------------------------------------------
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import { name, age } from "./person.js";

document.getElementById("demo").innerHTML = "My name is " + name;
document.getElementById("demo").innerHTML += ", I am " + age + ".";

</script>

</body>
</html>

2.IMPORT FROM DEFAULT EXPORTS:
--------------------------------------------------------
<!DOCTYPE html>
<html>

<body>

<p id="demo"></p>

<script type="module">
import message from "./message.js";

document.getElementById("demo").innerHTML = message();

</script>

</body>
</html>

TERNARY OPERATOR:
==================
=>The ternary operator is a simplified conditional operator like if / else.
=>Syntax:
	 condition ? <expression if true> : <expression if false>
EXAMPLE:
----------------
BEFORE:

<!DOCTYPE html>
<html>

<body>

<h1 id="demo"></h1>

<script>
function renderApp() {
  document.getElementById("demo").innerHTML = "Welcome!";
}

function renderLogin() {
  document.getElementById("demo").innerHTML = "Please log in";
}

let authenticated = true;

if (authenticated) {
  renderApp();
} else {
  renderLogin();
}

</script>

<p>Try changing the "authenticated" variable to false, and run the code to see what happens.</p>
</body>
</html>
AFTER:
<!DOCTYPE html>
<html>

<body>

<h1 id="demo"></h1>

<script>
function renderApp() {
  document.getElementById("demo").innerHTML = "Welcome!";
}

function renderLogin() {
  document.getElementById("demo").innerHTML = "Please log in";
}

let authenticated = true;

authenticated ? renderApp() : renderLogin();

</script>

<p>Try changing the "authenticated" variable to false, and run the code to see what happens.</p>
</body>
</html>
