JOINS IN SQL SERVER : -
------------------------
RETRIVE DATA FROM MULTIPLE TABLES
SYNTAX : -
	SELECT * /<LIST OF COLUMNS NAMES>  FROM <TN1>
	<JOIN KEY> <TN2> ON (JOINING CONDITION)
TWO CATEGEROIES : -
	ANSI - FORMAT JOINS :- 
	----------------------
		--RETIVING THE DATA WITH "ON" KEY WORD JOIN CONDITION
		--OLD STYLE FORMAT
		--FOUR TYPES
			-->INNER JOIN
			 -->OUTER JOIN
				-->LEFT OUTER JOIN
				-->RIGHT OUTER JOIN
				-->FULL OUTER JOIN	
			-->CROSS JOIN
			-->NATURAL JOIN

	NON - ANSI FORMAT JOINS : -
	---------------------------
		--RETRIVING THE DATA WITH "WHERE" KEY WORD JOIN CONDITION
		--NEW STYLE FORMAT
		--THREE TYPES
			-->EQUI JOIN
			-->NON EQUI JOIN
			-->SELF JOIN
---------------------------------------------------------------------------
EXAMPLE : --
CREATION OF TABLE :-
CREATE TABLE STUDENT(STID INT,SNAME VARCHAR(20),SMALLID VARCHAR(20),COURSEID INT)

INSERT STUDENT VALUES(101,'ADAMS','ADD@GMAIL.COM',10),(102,'JAMES','JAY@GMAIL.COM',20),(103,'SCOTT','SCOT@YAHOO',30)

CREATE TABLE COURSE(COURSEID INT,CNAME VARCHAR(20),CFEE DECIMAL(6,2))

INSERT COURSE VALUES(10,'SQL SERVER',1200),(20,'SQL DBA',1500),(40,'MSQL',3200),(50,'SAP',2400)

ANSI JOIN (NEW STYLW FORMAT):-
----------------------------
	==>INNER JOIN:-
		--RETRIVE THE DATA FROM MULTIPLE TABLES BASED ON EQUALITY
		--COMMON COLUMN
		--COMMON COLUMN DATA TYPE MUST BE SAME.
		--MATCHING DATA / ROWS.

		SELECT * FROM STUDENT INNER JOIN COURSE ON STUDENT.COURSEID = COURSE.COURSEID

		--QUERY WILL GIVE OUTPUT BASED ON THE EQUAL SYMBOL
	==>OUTER JOIN :-
		--RETRIVE BOTH MATCHING AND UNMATCHED DATA FROM THE TABLES
		--THREE TYPES : -
			==>LEFT OUTER JOIN:-
				RETRIVE THE DATA THAT IS MATCHING DATA FROM ALL THE TABLES
				BUT UNMATCHED DATA FROM THE LEFT HAND SIDE TABLE ONLY

				SELECT * FROM STUDENTS LEFT OUTER JOIN COURSE C ON S.COURSEID = C.COURSEID

			==>RIGHT OUTER JOIN:-
				RETRIVE THE DATA THAT IS MATCHING DATA FROM ALL THE TABLES
				BUT UNMATCHED DATA FROM THE RIGHT HAND SIDE TABLE ONLY
			
				SELECT * FROM STUDENT S RIGHT OUTER JOIN COURSE C ON S.COURSEID = C.COURSEID

			==>FULL OUTER JOIN : -
				RETRIVE ALL THE MATCHING AND INMATCHING DATA FROM ALL THE TABLES

				SELECT * FROM STUDENT S FULL OUTER JOIN COURSE C ON S.COURSEID = C.COURSEID
	
	==>CROSS JOIN : -
		--PRODUCT OF ROWS.(M X N ROWS)
		--IT IS USED TO PRODUCT ROW TO ROW
		--THIS IS ONLY JOINT WITHOUT HAVING CONDITION
		--USED TO JOIN TWO OR MORE THAN TWO TABLES DATA WITHOT JOIN CONDITION
		--THERE IS NO REQUIRED A COMMON COLUMN

		SELECT * FROM STUDENT CROSS JOIN COURSE

	==>NATURAL JOIN : -
		--NOT SUPPORTED IN SQL SERVER
		--USED TO AVOID DUPLICATE COLUMNS FROM JOIN TABLES
		--SUPPORTED BY ORACLE
		--SIMILAR TO INNER JOIN

NON- ANSI JOINS(OLD STYLE FORMAT):-
---------------------------------
	==>EQUI JOIN : -
		--CREATES A JOIN FOR WQUALITY OR MATCHING COLUMN VALUES
		OF FIFFERENT TABES
		--EQUI JOIN ALSO CREATED JOIN USING ON AND THEN PROVIDING
		NAMES OF COLUMNS USING EQUAL SYMBOL (=)
		-->SYNTAX 1: -
			SELECT COLUMN_LIST FROM TABLE1,TABLE2...
			WHERE TABLE1.COLUMN_NAME = TABLE2.COLUMN_NAME
		EXAMPLE : -
				
			SELECT * FROM STUDENT,COURSE WHERE STUDENT.COURSEID = COURSE.COURSEID

		-->SYNTAX 2 : -
			SELECT COLUMN_LIST FROM TABLE1 JOIN TABLE2
			[ON (JOIN_CONDITION)]
		EXAMPLE : -
			
			SELECT * FROM STUDENT JOIN COURSE ON STUDENT.COURSEID = COURSE.COURSEID
	==>NON EQUI JOIN : -
		--NON EQUI JOIN PERFORMS A JOIN USING COMPARISION
		OPERATOR OTHER THAN EQUAL(=) SIGN LIKE >,<,>=,<= 
		WITH CONDITIONS
		--NO NEED A COMMON COLUMN
		-->SYNTAX : -
			SELECT * FROM TABLE1,TABLE2
			WHERE TABLE1.COLUMN [> | < | >= | <= |]
			      TABLE2.COLUMN
		EXAMPLE : -
		
			SELECT * FROM STUDENT,COURSE WHERE STUDENT.COURSEID > COURSE.COURSEID
	==> SELF JOIN : -
		--JOINING A TABLE DATA BY ITSELF IS CALLED SELF JOIN
		--SELF JOIN CAN BE USE WITH ALIAS NAME OF THE TABELE
		--WE CAN NOT IMPLEMENT SLF JOIN WITHOUT ALIAS NAME OF THE TABLE
		--CAN BE IMPLEMENTED IN SINGLE TABLE ONLY.
		--WHEN WE COMPARE A COLUMN VALUES WITHIN THE SAME TABLE
		--THIS INCLUDES JOIN CONDITION AND ADDITIONAL CONDITION
		-->SYNTAX : -
			SELECT * FROM TABLE1 ALIAS1,TABLE2 ALIAS2 
			WHERE ALIAS1.COLUMN = ALIAS2.COLUMN
			AND
			E2.ENAME = 'NAME'
		EXAMPLE : -
			CREATE TABLE EMPDETAILS (EID INT,ENAME VARCHAR(20),ESAL INT,AGE INT)
			INSERT EMPDETAILS VALUES (101,'AA',10000,20),(102,'BB',10000,21),(103,'CC',20000,23),(104,'DD',23000,24)
			SELECT * FROM EMPDETAILS

			SELECT E1.EID,E1.ENAME,E1.ESAL FROM EMPDETAILS E1, EMPDETAILS E2 WHERE E1.ESAL = E2.ESAL AND E2.ENAME = 'AA'
						OR
			SELECT E2.EID,E2.ENAME,E2.ESAL FROM EMPDETAILS E1, EMPDETAILS E2 WHERE E1.ESAL = E2.ESAL AND E1.ENAME = 'AA'






