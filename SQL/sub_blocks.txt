SUB BLOCKS IN T/SQL :-
===================

	==>SUB BLOCKS :-
	--------------
		-->NAMED BLOCKS
		-->WRITTEN CODE IN SUB BLOCK IS SAVED IN DATA BASE
		-->ONCE THE CODE IS SAVED, THAT CODE CAN BE REUSED(IN .NET / JAVA / DB)
		==>TWO TYPES :-
		   -----------
			=>STORED PROCEDURE
			=>STORED FUNCTION
==========================================================================



STORED PROCDURES IN T/SQL: -
--------------------------

-->THESE ARE PRE-COMPILED(one time compilation) BLOCK.

-->WE CAN CREATE IT IN TWO WAYS :-
	=>WITH OUT PARAMETERS.
	=>WITH PARAMETERS.


WORKING WITH WITHOUT PARAMETERS : -
================================
-->SYNTAX :-
-----------
	
	CREATE[OR ALTER] PROCEDURE <PNAME>
	AS
	BEGIN
		<PROCEDURE BODY / STATEMENTS>
	END
-->SYNTAX TO CALL :-
------------------

	EXECUTE <PNAME> (or) EXEC <PNAME
		(or)
	EXECUTE <PNAME> VALUE / VALUES (or) EXEC <PNAME> VALUE / VALUES

EXAMPLE : -
==========
-->DISPLAY OF EMPLOYEE TABLE
SOL :-
	
	CREATE PROCEDURE P1 
	AS
	BEGIN
		SELECT * FROM EMPLOYEE
	END

	EXECUTE P1

WORKING WITH WITH PARAMETERS : -
================================
-->SYNTAX :-
-----------
	
	CREATE[OR ALTER] PROCEDURE <PNAME> (@PARAMETER1 <DATATYPE>,PARAMETER2<DATATYPE>,
	........................................................)
	AS
	BEGIN
		<PROCEDURE BODY / STATEMENTS>
	END
-->SYNTAX TO CALL :-
------------------
	EXECUETE <PNAME> @PARAMETER1,PARAMETER2,......
		(or)
	EXEC <PNAME> @PARAMETER1,PARAMETER2,........


EXAMPLE :-
=========
-->DISPLAY OF NAMES WHOSE SALARY IS GREATER THAN 500
SOL : -

	CREATE PROCEDURE P1 (@E1 INT)
	AS
	BEGIN
		SELECT ENAME FROM EMPLOYEE1 WHEERE SAL > @E1
	END

	EXEC P1 50000




================================================================================
STORED FUNCTIONS IN T/SQL : -
----------------------------

-->A FUNCTION IS A BLOCK OF CODE WHICH WILL PERFORM SOME OPERTION
ON GIVEN VALUES AND MUST RETURN A VALUE

-->STORED FUNCTIONS ARE ALSO CALLED USER DEFINED FUNCTIONS 
IN T/SQL

-->THE USER WILL DEFINE TWO TYPES STORED FUNCTIONS  :-

	-->SCALAR VALUED FUNCTIONS
	-->TABLE VALUED FUNCTIONS

WORKING WITH SCALAR VALUED FUNCTIONS:-
====================================

-->IN THIS, A FUNCTION WILL RETURN A SINGLE VALUE OR A SINGLE
COLUMN VALUE FROM THE TABLE

-->SYNTAX TO DEFINE SCALAR VALUES FUNCTION :-
-------------------------------------------

	CREATE[OR ALTER] FUNCTION <F NAME> (@<PARAMETER NAME1><DATA TYPE>[SIZE],
	......................................................................)

	RETURNS <RETURN VARIABLE DATATYPE>
	AS
	BEGIN
	<FUNCTION BODY / STATEMENTS>
	RETURN <RETURN PARAMETER/ATTRIBUTE/VARIABLE NAME>
	END
-->SYNTAX TO CALL A SCALAR VALUED FUNCTION : -
----------------------------------------
	
	SELECT dbo.<FNAME> (VALUE/VALUES)

EXAMPLE : -
---------
CREATE A SCALAR VALUED FUNCTION TO RETURN THE GROSS SALARY OF THE EMPLOYEE BASED
ON THE FOLLOWING CONDITIONS .
	-->HRA ---- 10%
	-->DA ---- 20%
	-->PF ---- 10%
	-->GROSS SALARY
SOL : -

	CREATE FUNCTION FRS(@EID INT)
	RETURNS MONEY
	AS
	BEGIN
		DECLARE @BASIC MONEY,@HRA MONEY,@DA MONEY,@PF MONEY,@GROSS MONEY
		
		SELECT @BASIC = SAL FROM EMPLOYEE1 WHERE EID = @EID
		SET @HRA = @BASIC * 0.1
		SET @DA = @BASIC * 0.2
		SET @PF = @BASIC * 0.1
		SET @GROSS = @BASIC + @HRA + @DA + @PF
		RETURN @GROSS
	END

	SELECT DBO.FRS(102) GROSSSALARY

WORKING WITH TABLE VALUED FUNCTIONS : -
====================================

-->IN THIS, THE FUNCTION WILL RETURN MORE THAN ONE VLAUE/MORE
THAN ONE COLUMN VALUE FROM THE TABLE.

-->SYNTAX TO DEFINE TABLE VALUED FUNCTION :-
-------------------------------------------
	CREATE[OR ALTER] FUNCTION <FNAME> (@<PARAMETER1><DATA TYPE>[SIZE],
	................................................................)
	RETURNS(<SELECT QUERY / STATEMENT>)

-->SYNTAX TO CALL A TABLE VALUED FUNCTION : -
----------------------------------------
	SELECT * FROM <FNAME>(VALUE / VALUES)

EXAMPLE :-
---------
CREATE A TABLE VALUES FUNCTION TO ACCEPT DEPT NAME AS A PARAMETER
AND RETURN THE LIST OF EMPLOYEE WHO ARE WORKING IN THE GIVEN
DEPT NAME

SOL : -

	CREATE FUNCTION F2 (@DEPTNAME VARCHAR(40))
	RETURNS TABLE
	AS
	RETURN (SELECT * FROM EMPLOYEE1 WHERE DEPTNAME = @DEPTNAME) 

	SELECT * FROM F2('.NET')

















